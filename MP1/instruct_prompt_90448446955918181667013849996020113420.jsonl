{"task_id": "HumanEval/96", "completion": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n\nprint(count_up_to(5))\nprint(count_up_to(11))\nprint(count_up_to(0))\nprint(count_up_to(20))\nprint(count_up_to(1))\nprint(count_up_to(18))\n\n# 2,3,5,7,11,13,17,19\n# 2,3,5,7,11,13,17\n# []\n# 2,3,5,7,11,13,17,19\n# []\n# 2,3,5,7,11,13,17\n# 2,3,5,7,11,13,17,19\n# 2,3,5,7,11,13,17,19\n# 2,3,5,7,11,13,17,19\n# 2,3,"}
{"task_id": "HumanEval/117", "completion": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result\n\n\nprint(select_words(\"Mary had a little lamb\", 4))  # [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # [\"Mary\", \"lamb\"]\nprint(select(\"simple white space\", 2))  # []\nprint(select_words(\"Hello world\", 4))  # [\"world\"]\nprint(select_words(\"Uncle sam\", 3))  # [\"Uncle\"]\n\n# The function is case-insensitive, so it treats 'a' and 'A' as the same letter.\n# The function is also case-sensitive, so it treats 'a' and 'A' as different letters.\n# The function splits the string into words based on spaces.\n# The function counts the number of consonants in each word.\n# If the number of consonants in a word is equal to n, the word is added to the result list.\n# The function returns"}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n\nprint(add([4, 2, 6, 7]))\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(add([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\nprint(add([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\nprint(add([2, 1, 2, 1, 2, 1, 2, 1, 2, 1]))\nprint(add([1, 2, 1, 2, 1, 2, 1, 2, 1, 2]))\nprint(add([1, 1, 1, 1, 1, 1, 1, 1, 1, 10]))\nprint(add([10, 10,, 10, 10, 10, 10, 10, 10, 10]))\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(add([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\nprint(add([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\nprint(add([2, 1, 2"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        start = planets.index(planet1)\n        end = planets.index(planet2)\n        if start > end:\n            start, end = end, start\n        return tuple(planets[start+1:end])\n\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Pluto\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Jupiter\", \"Earth\"))\n\n# Output:\n# ('Saturn', 'Uranus')\n# ('Venus', 'Earth')\n# ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n# ()\n# ()\n# ('Earth', 'Jupiter')"}
{"task_id": "HumanEval/64", "completion": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for letter in s:\n        if letter.lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count\n\n\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowelscount(\"\") == 0\n    assert vowels_count(\"Y\") == 1\n    assert vowels_count(\"y\") == 1\n    assert vowels_count(\"YoLo\") == 2\n    assert vowels_count(\"AEIOU\") == 5\n    assert vowels_count(\"Edgy\") == 2\n    assert vowels_count(\"sneezy\") == 3\n    assert vowels_count(\"bumpy\") == 2\n    assert vowels_count(\"happy\") == 3\n    assert vowels_count(\"sleepy\") == 3\n    assert vowels_count(\"dopey\") == 2\n    assert vowels_count(\"sassy\") == 2\n    assert vowels_count(\"bashful\") == 3\n    assert vowels_count(\"doc\") == 1\n    assert vowels_count(\"Grumpy\") == 3\n    assert vowels_count(\"happy\") == 3\n    assert vowels_count(\"sleepy\") == 3\n    assert vowels_count(\"dopey\") == 2\n    assert vowels_count(\"sneezy\") == 3\n    assert vowels_count(\"b"}
{"task_id": "HumanEval/149", "completion": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst = [i for i in lst if len(i) % 2 == 0]\n    return sorted(lst)\n\n\nprint(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))\nprint(sorted_listum([\"aa\", \"a\", \"aaa\"]))\n\n# 1. Filter out the strings with odd lengths.\n# 2. Sort the list by length of each word.\n# 3. If two words have the same length, sort the list alphabetically.\n# 4. Return the sorted list.\n\n# def sorted_list_sum(lst):\n#     lst = [i for i in lst if len(i) % 2 == 0]\n#     return sorted(lst)\n\n# print(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))\n# print(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))\n\n# def sorted_list_sum(lst):\n#     lst = [i for i in lst if len(i) % 2 == 0]\n#     return sorted(lst)\n\n# print(sorted_list_sum("}
{"task_id": "HumanEval/13", "completion": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while a != b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\n\ndef least_common_multiple(a: int, b: int) - int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef test_fraction(fraction: Fraction) -> str:\n    \"\"\" Test if the fraction is correct\n    >>> test_fraction(Fraction(1, 2))\n    'Fraction is correct'\n    >>> test_fraction(Fraction(1, 0))\n    'Fraction is incorrect'\n    \"\"\"\n    try:\n        Fraction(1, 1) / fraction\n        return 'Fraction is correct'\n    except ZeroDivisionError:\n        return 'Fraction is incorrect'\n\n\ndef test_all_fractions(fractions: List[Fraction]) -> List[str]:\n    \"\"\" Test all fractions in the list\n    >>> test_all_fractions([Fraction(1, 2), Fraction(1, 0), Fraction(3, 4)])\n    ['Fraction is correct', 'Fraction is incorrect', 'Fraction is correct']\n    \"\"\"\n    return [test_fraction(fraction) for fraction in fractions]\n\n\ndef test_all_fractions_with_try_except(fractions: List[Fraction]) -> List[str]:\n    \"\"\" Test all fractions in the list with try except\n    >>> test_all_fra"}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    lower_case = [k.islower() for k in dict.keys()]\n    upper_case = [k.isupper() for k in dict.keys()]\n    return all(lower_case) or all(upper_case)\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})) # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})) # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })) # True\nprint(check_dict_case({})) # False\n\n# Note: The function is case sensitive. It will return False if the dictionary has keys that are in different cases.\n# For example, {\"Name\":\"John\", \"name\":\"John\"} will return False.\n# The function assumes that the dictionary keys are strings. If the dictionary keys are not strings, it"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n    return lst == sorted(lst)\n\n\nprint(is_sorted([5]))  # ➞ True\nprint(is_sorted([1, 2, 3, 4, 5]))  # ➞ True\nprint(is_sorted([1, 3, 2, 4, 5]))  # ➞ False\nprint(isorted([1, 2, 3, 4, 5, 6])  # ➞ True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7])  # ➞ True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7])  # ➞ False\nprint(is_sorted([1, 2, 2, 3, 3, 4])"}
{"task_id": "HumanEval/123", "completion": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n\n    return sorted([num for num in collatz if num % 2 != 0])\n\n\nprint(get_odd_collatz(5))  # [1, 5]\nprint(get_odd_collatz(15))  # [1, 5, 9, 15]\nprint(get)\nprint(get_odd_collatz(20))  # [1, 5, 9, 15, 20]\nprint(get_odd_collatz(25))  # [1, 5, 9, 15, 21, 25]\nprint(get_odd_collatz(30))  # [1, 5, 9, 15, 21, 25, 29, 30]\nprint(get"}
{"task_id": "HumanEval/162", "completion": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        m = hashlib.md5()\n        m.update(text.encode('utf-'))\n        return m.hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '2ef7bde608ce5404e956bd5dccb7e020fc75aed7'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        m = hashlib.sha1()\n        m.update(text.encode('utf-8'))\n        return m.hexdigest()\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == 'b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        m = hashlib.sha256()\n        m.update(text.encode('utf-8'))\n        return m.hexdigest()\n\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string."}
{"task_id": "HumanEval/41", "completion": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * n\n\n\ndef main():\n    print(car_race_collision(3))\n\n\nif __name__ == \"__main__\":\n    main()\n\n#tests/test_car_race_collision.py\nimport pytest\nfrom car_race_collision import car_race_collision\n\n\ndef test_car_race_collision():\n    assert car_race_collision(1) == 1\n    assert car_race_collision(2) == 4\n    assert car_race_collision(3) == 9\n    assert car_race_collision(4) == 16\n    assert car_race_collision(5) == 25\n    assert car_race_collision(10) == 100\n    assert car_race_collision(20) == 400\n    assert car_race_collision(100) == 10000\n\n#tests/test_main.py\nfrom car_race_collision import main\n\n\ndef test_main():\n    assert main() is None  # main function should not return anything.\n\n#tests/test_solution.py\nimport pytest\nfrom car_race_collision import car_race_collision\n\n\ndef test_solution():\n    assert car_race_collision(1) == 1\n   "}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(n - min_val) / (max_val - min_val) for n in numbers]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#test_rescale_to_unit.py\nimport unittest\nfrom rescale_to_unit import rescale_to_unit\n\nclass TestRescaleToUnit(unittest.TestCase):\n\n    def test_rescale_to_unit(self):\n        self.assertEqual(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])\n        self.assertEqual(rescale_to_unit([-1.0, 0.0, 1.0]), [0.0, 0.5, 1.0])\n        self.assertEqual(rescale(<{[>.<]}.<)\n\nif __name__ == '__main__':\n    unittest.main()from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit"}
{"task_id": "HumanEval/61", "completion": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n\ndef test_correct_bracketing():\n    assert correct_bracketing(\"(\") == False\n    assert correct_bracketing(\"()\") == True\n    assert correct_bracketing(\"(()())\") == True\n    assert correct_bracketing(\")(()\") == False\n\n\ntest_correct_bracketing()\n\n# 스택을 사용하면 문제를 효율적으로 해결할 수 있다. 스택은 마지막에 들어온 원소가 먼저 나가는 구조를 가지고 있어서 이 문제에 적합하다. 스택에 원소를 넣으면서 여는 괄호를 만나면 �"}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Your code here\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b\n\n\nprint(multiply(148, 412))  # should return 16\nprint(multiply(19, 28))  # should return 72\nprint(multiply(2020, 1851))  # should return 0\nprint(multiply(14, -15))  # should return 20\n\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Your code here\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b\n\n\nprint(multiply(148, 412))  # should return 16\nprint(multiply(19, 28))  # should return 7"}
{"task_id": "HumanEval/27", "completion": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Check if a given string is a palindrome.\n    >>> is_palindrome('radar')\n    True\n    >>> is_palindrome('python')\n    False\n    \"\"\"\n    return string == string[::-1]\n\n\ndef count_substring(string: str, substring: str) -> int:\n    \"\"\" Count the number of occurrences of a substring in a given string.\n    >>> count_substring('hello world, hello python', 'hello')\n    2\n    \"\"\"\n    return string.count(substring)\n\n\ndef remove_substring(string: str, substring: str) - str:\n    \"\"\" Remove all occurrences of a substring from a given string.\n    >>> remove_substring('hello world, hello python', 'hello')\n    ' world,  python'\n    \"\"\"\n    return string.replace(substring, '')\n\n\ndef remove_punctuation(string: str) -> str:\n    \"\"\" Remove all punctuation from a given string.\n    >>> remove_punctuation('hello, world!!')\n    'hello world'\n    \"\"\"\n    return string.translate(str.maketrans('', '', string.punctuation))\n\n\ndef remove_whitespace(string: str) -> str:\n    \"\"\" Remove all whitespace from a given string.\n    >>> remove remove_whitespace('hello world ')\n    'helloworld'\n    \"\"\"\n    return string.replace(' ', '')\n\n\ndef remove_duplicates(string: str) -> str:\n    \"\"\" Remove all duplicate characters from a given string.\n    >>> remove_duplicates('hello')\n    'he"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    stack = []\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if not stack:\n                start = i\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                groups.append(paren_string[start: i+1])\n    return groups\n\nprint(separate_paren_groups('( ) (( )) (( )( ))'))\n\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['"}
{"task_id": "HumanEval/68", "completion": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    smallest_even_value = float('inf')\n    smallest_even_index = float('inf')\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even_value:\n            smallest_even_value = value\n            smallest_even_index = index\n        elif value % 2 == 0 and value == smallest_even_value and index < smallest_even_index:\n            smallest_even_index = index\n\n    if smallest_even_value != float('inf'):\n        return [smallest_even_value, smallest_even_index]\n    else:"}
{"task_id": "HumanEval/150", "completion": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return y\n\n# Test cases\nprint(x_or_y(7, 34, 12))  # should return 34\nprint(x_or_y(15, 8, 5))  # should return 5\nprint(xc<a<n<d>(11, 100, 200)  # should return 100\nprint(x_or_y(1, 1000, 2000)  # should return 2000\nprint(x_or_y(2, 500, 1000)  # should return 500\nprint(x_or_y(3, 100, 200)  # should return 100\nprint(x_or_y(4, 200, 300)  # should return 300\nprint(x_or_y(5, 300, 400)  # should return 300\nprint(x_or_y(6, 400, 500)  # should return 400\nprint(x_or_y(7, 500, 600)  # should return 500\nprint(x_or_y(8, 600, 700)  # should return 600\nprint(x_or_y(9, 700, 800)  # should return 700\nprint"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return (s, s == s[::-1])\n\nprint(reverse_delete(\"abcde\", \"ae\"))\nprint(reverse_delete(\"abcdef\", \"b\"))\nprint(reverse(\"abcdedcba\", \"ab\"))\n\n# 1. Replace all characters in s that are in c with nothing.\n# 2. Check if the result string is the same as its reverse.\n# 3. Return the result string and the check result.\n\n# The time complexity of this solution is O(n^2) because of the replace operation.\n# The space complexity is O(n) because we are storing the result string.\n\n# The replace operation is O(n^2) because it has to go through the string for each character in c.\n# The check for palindrome is O(n) because it has to go through the string once.\n# So, the total time complexity is O(n^2).\n\n# The space complexity is O(n) because we are storing the result string.\n# So, the total space complexity is O(n).\n\n# The time complexity of this solution is O(n^2) because of the replace operation.\n# The space complexity is O(n) because we are storing the result string.\n\n# The replace operation is O(n^2) because it has to go through"}
