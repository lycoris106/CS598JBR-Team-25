{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes"}
{"task_id": "HumanEval/117", "completion": "    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/148", "completion": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        start = planets.index(planet1)\n        end = planets.index(planet2)\n        if start > end:\n            start, end = end, start\n        return tuple(planets[start+1:end])\n\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Pluto\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Jupiter\", \"Earth\"))\n\n# Output:\n# ('Saturn', 'Uranus')\n# ('Venus', 'Earth')\n# ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n# ()\n# ()\n# ('Earth', 'Mars', 'J"}
{"task_id": "HumanEval/64", "completion": "Add more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for letter in s:\n        if letter.lower() in vowels:\n            count += 1\n    if s[-1] == \"y\":\n        count += 1\n    return count"}
{"task_id": "HumanEval/149", "completion": "    lst = [i for i in lst if len(i) % 2 == 0]\n    return sorted(lst)"}
{"task_id": "HumanEval/13", "completion": "    while a != b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    lower_case = [k.islower() for k in dict.keys()]\n    upper_case = [k.isupper() for k in dict.keys()]\n    return all(lower_case) or all(upper_case)\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})) # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})) # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })) # True\nprint(check_dict_case({})) # False\n\n# Note: The function is case sensitive. It will return False if the dictionary has keys that are in different cases.\n# For example, {\"Name\":\"John\", \"name\":\"John\"} will return False.\n# The function is also not designed to handle dictionaries with non-string keys.\n# For"}
{"task_id": "HumanEval/126", "completion": "    return lst == sorted(lst)"}
{"task_id": "HumanEval/123", "completion": "    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            collatz.append(n)\n    return sorted(collatz)"}
{"task_id": "HumanEval/162", "completion": "    if text == \"\":\n        return None\n    else:\n        m = hashlib.md5()\n        m.update(text.encode('utf-'))\n        return m.hexdigest()"}
{"task_id": "HumanEval/41", "completion": "    return n * n"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(n - min_val) / (max_val - min_val) for n in numbers]"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack"}
{"task_id": "HumanEval/97", "completion": "    a_unit_digit = abs(a) % 10\n    b_unit_digit = abs(b) % 10\n    return a_unit_digit * b_unit_digit"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"}
{"task_id": "HumanEval/1", "completion": "    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    stack = []\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if not stack:\n                start = i\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                groups.append(paren_string[start: i+1])\n    return groups\n\nprint(separate_paren_groups('( ) (( )) (( )( ))'))\n\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['()', '(())', '(()())']\n# ['"}
{"task_id": "HumanEval/68", "completion": "    smallest_even_value = float('inf')\n    smallest_even_index = float('inf')\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even_value:\n            smallest_even_value = value\n            smallest_even_index = index\n        elif value % 2 == 0 and value == smallest_even_value and index < smallest_even_index:\n            smallest_even_index = index\n\n    if smallest_even_value != float('inf'):\n        return [smallest_even_value, smallest_even_index]\n    else:"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i, '')\n    return (s, s == s[::-1])\n\nprint(reverse_delete(\"abcde\", \"ae\"))\nprint(reverse_delete(\"abcdef\", \"b\"))\nprint(reverse(\"abcdedcba\", \"ab\"))\n\n# 1. Replace all characters in s that are in c with nothing.\n# 2. Check if the result string is the same as its reverse.\n# 3. Return the result string and the check result.\n\n# The time complexity of this solution is O(n^2) because of the replace operation.\n# The space complexity is O(n) because we are storing the result string.\n\n# The replace operation is O(n^2) because it has to go through the string for every character in c.\n# The check for palindrome is O(n) because it has to go through the string once.\n# So, the total time complexity is O(n^2).\n\n# The space complexity is O(n) because we are storing the result string.\n# So, the total space complexity is O(n).\n\n# The time complexity of this solution is O(n^2) because of the replace operation.\n# The space complexity is O(n) because we are storing the result string.\n\n# The replace operation is O(n^2) because it has to go through"}
