{"task_id": "HumanEval/96", "completion": "    pass"}
{"task_id": "HumanEval/117", "completion": "    pass"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/148", "completion": "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        if planet1_index > planet2_index:\n            return planets[planet2_index+1:planet1_index]\n        else:\n            return planets[planet1_index+1:planet2_index]"}
{"task_id": "HumanEval/64", "completion": "Add more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    return sum(1 for c in s if c in \"aeiou\")"}
{"task_id": "HumanEval/149", "completion": "    lst = [i for i in lst if len(i) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/13", "completion": "    if a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if type(key) != str:\n                return False\n            elif key.islower() == False and key.isupper() == False:\n                return False\n        return True"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return get_odd_collatz(n // 2) + [n]\n        else:\n            return get_odd_collatz(3 * n + 1) + [n]"}
{"task_id": "HumanEval/162", "completion": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) // 2"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/61", "completion": "    if brackets == \"\":\n        return True\n    if brackets[0] == \"(\" and brackets[-1] == \")\":\n        return correct_bracketing(brackets[1:-1])\n    else:\n        return False"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()"}
{"task_id": "HumanEval/1", "completion": "    pass"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n\n    min_even = float('inf')\n    min_even_index = float('inf')\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_even:\n            min_even = num\n            min_even_index = i\n        elif num % 2 == 0 and num == min_even and i < min_even_index:\n            min_even_index = i\n\n    if min_even == float('inf'):\n        return []\n\n    return [min_even, min_even_index]"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return y\n    if n == 2:\n        return x\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return (s,s == s[::-1])"}
