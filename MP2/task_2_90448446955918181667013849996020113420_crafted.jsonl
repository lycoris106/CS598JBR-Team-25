{"task_id": "HumanEval/96", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\n\n### Response:", "response": "import pytest\n\ndef test_count_up_to_0():\n    assert count_up_to(0) == []\n\ndef test_count_up_to_1():\n    assert count_up_to(1) == []\n\ndef test_count_up_to_2():\n    assert count_up_to(2) == [2]\n\ndef test_count_up_to_5():\n    assert count_up_to(5) == [2, 3]\n\ndef test_count_up_to_11():\n    assert count_up_to(11) == [2, 3, 5, 7]\n\ndef test_count_up_to_20():\n    assert countup_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\n\ndef test_count_up_to_18():\n    assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]", "coverage": 100.0}
{"task_id": "HumanEval/117", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\n\n### Response:", "response": "import pytest\n\ndef test_select_words_empty_string():\n    assert select_words(\"\", 3) == []\n\ndef test_select_words_single_word():\n    assert select_words(\"hello\", 2) == []\n    assert select_words(\"hello\", 1) == [\"hello\"]\n\ndef test_select_words_multiple_words():\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    assert select_words(\"simple white space\", 2) == []\n    assert select_words(\"Hello world\", 4) == [\"world\"]\n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n\ndef test_select_words_case_insensitive():\n    assert select_words(\"Mary HAD a little lamb\", 4) == [\"little\"]\n\ndef test_select_words_vowels_in_words():\n    assert select_words(\"Hello world\", 3) == [\"world\"]\n\ndef test_select_words_consonants_in_words():\n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]", "coverage": 100.0}
{"task_id": "HumanEval/85", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\n\n### Response:", "response": "def test_add():\n    assert add([4, 2, 6, 7]) == 2\n    assert add([1, 2, 3, 4, 5]) == 4\n    assert add([10, 20, 30, 40, 50]) == 60\n    assert add([1, 1, 1, 1, 1]) == 0\n    assert add([2, 1, 2, 1, 2]) == 2\n    assert add([0, 1, 2, 3, 4]) == 2\n    assert add([10, 20, 30, 40, 50, 60]) == 60\n    assert add([1, 2, 1, 2, 1, 2]) == 2\n    assert add([100, 200, 300, 400, 500]) == 600\n    assert add([1, 1, 2, 1, 1]) == 2", "coverage": 100.0}
{"task_id": "HumanEval/148", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\n\n### Response:", "response": "import pytest\n\ndef test_bf_jupiter_neptune():\n    assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")\n\ndef test_bf_earth_mercury():\n    assert bf(\"Earth\", \"Mercury\") == (\"Venus\",)\n\ndef test_bf_mercury_uranus():\n    assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\ndef test_bf_same_planets():\n    assert bf(\"Earth\", \"Earth\") == ()\n\ndef test_bf_invalid_planets():\n    assert bf(\"Earth\", \"Pluto\") == ()\n    assert bf(\"Pluto\", \"Earth\") == ()\n    assert bf(\"Pluto\", \"Pluto\") == ()", "coverage": 100.0}
{"task_id": "HumanEval/64", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\n\n### Response:", "response": "import pytest\n\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"\") == 0\n    assert vowels_count(\"a\") == 1\n    assert vowels_count(\"Y\") == 1\n    assert vowels_count(\"aeiou\") == 5\n    assert vowels_count(\"AEIOU\") == 5\n    assert vowels_count(\"bcd\") == 0\n    assert vowels_count(\"sdfghjklzxcvbnm\") == 0\n    assert vowels_count(\"YoLo\") == 2\n    assert vowels_count(\"y\") == 1\n    assert vowels_count(\"Y\") == 1\n    assert vowels_count(\"Yo\") == 1\n    assert vowels_count(\"YoLo\") == 2\n    assert vowels_count(\"YoLoY\") == 3", "coverage": 100.0}
{"task_id": "HumanEval/149", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\n\n### Response:", "response": "import pytest\n\n\ndef test_sorted_list_sum_empty():\n    assert sorted_list_sum([]) == []\n\n\ndef test_sorted_list_sum_single_element():\n    assert sorted_list_sum([\"aa\"]) == [\"aa\"]\n\n\ndef test_sorted_list_sum_multiple_elements():\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n\n\ndef test_sorted_list_sum_duplicates():\n    assert sorted_list_sum([\"aa\", \"aa\", \"aa\"]) == [\"aa\", \"aa\", \"aa\"]\n\n\ndef test_sorted_list_sum_odd_length():\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n\n\ndef test_sorted_list_sum_mixed_lengths():\n    assert sorted([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]", "coverage": 100.0}
{"task_id": "HumanEval/13", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n    return a\n\n\n### Response:", "response": "import pytest\n\ndef test_greatest_common_divisor():\n    assert greatest_common_divisor(3, 5) == 1\n    assert greatest_common_divisor(25, 15) == 5\n    assert greatest_common_divisor(0, 10) == 10\n    assert greatest_common_divisor(10, 0) == 10\n    assert greatest_common_divisor(0, 0) == 0", "coverage": 100.0}
{"task_id": "HumanEval/95", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n\n\n### Response:", "response": "import pytest\n\ndef test_check_dict_case_all_lower_case_keys():\n    assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True\n    assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"cherry\"}) == True\n    assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"cherry\", \"d\":\"date\"}) == True\n\ndef test_check_dict_case_all_upper_case_keys():\n    assert check_dict_case({\"A\":\"APPLE\", \"B\":\"BANANA\"}) == True\n    assert check_dict_case({\"A\":\"APPLE\", \"B\":\"BANANA\", \"C\":\"CHERRY\"}) == True\n    assert check_dict_case({\"A\":\"APPLE\", \"B\":\"BANANA\", \"C\":\"CHERRY\", \"D\":\"DATE\"}) == True\n\ndef test_check_dict_case_mixed_case_keys():\n    assert check_dict_case({\"a\":\"APPLE\", \"B\":\"BANANA\"}) == False\n    assert check_dict_case({\"a\":\"APPLE\", \"b\":\"BANANA\", \"C\":\"CHERRY\"}) == False\n    assert check_dict_case({\"A\":\"APPLE\", \"B\":\"BANANA\", \"c\":\"CHERRY\"}) == False\n    assert check_dict_case({\"A\":\"APPLE\", \"B\":\"BANANA\", \"C\":\"CHERRY\", \"d\":\"DATE\"}) == False\n\ndef test_check_dict_case_non_string_keys():\n    assert check_dict_case({1:\"apple\", \"b\":\"banana\"}) == False\n    assert check_dict_case({1:\"apple\", 2:\"banana\", \"c\":\"cherry\"}) == False\n    assert check_dict_case({\"a\":\"apple\", 2:\"banana\", \"c\":\"cherry\"}) == False\n    assert check_dict_case({\"a\":\"apple\", 2:\"banana\", \"c\":\"cherry\", 4:\"date\"}) == False\n\ndef test_check_dict_case_empty_dict():\n    assert check_dict_case({}) == False", "coverage": 94.74}
{"task_id": "HumanEval/126", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n\n\n### Response:", "response": "import pytest\n\ndef is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else::\n        return False\n\ndef test_is_sorted():\n    assert is_sorted([5]) == True\n    assert is_sorted([1, 2, 3, 4, 5]) == True\n    assert is_sorted([1, 3, 2, 4, 5]) == False\n    assert is_sorted([1, 2, 3, 4, 5, 6]) == True\n    assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True\n    assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False\n    assert is_sorted([1, 2, 2, 3, 3, 4]) == True\n    assert is_sorted([1, 2, 2, 2, 3, 4]) == False", "coverage": 0}
{"task_id": "HumanEval/123", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\n\n### Response:", "response": "def test_get_odd_collatz():\n    assert get_odd_collatz(1) == [1]\n    assert get_odd_collatz(2) == [2]\n    assert get_odd_collatz(3) == [3, 10]\n    assert get_odd_collatz(4) == [4]\n    assert get_odd_collatz(5) == [5, 16]\n    assert get_odd_collatz(6) == [6, 3]\n    assert get_odd_collatz(7) == [7, 22]\n    assert get_odd_collatz(8) == [8]\n    assert get_odd_collatz(9) == [9, 28]\n    assert get_odd_collatz(10) == [10, 5]\n    assert get_odd_collatz(11) == [11, 34]\n    assert get_odd_collatz(12) == [12, 6]\n    assert get_odd_collatz(13) == [13, 40]\n    assert get_odd_collatz(14) == [14, 7]\n    assert get_odd_collatz(15) == [15, 46]\n    assert get_odd_collatz(16) == [16]\n    assert get_odd_collatz(17) == [17, 52]\n    assert get_odd_collatz(18) == [18, 9]\n    assert get_odd_collatz(19) == [19, 58]\n    assert get_odd_collatz(20) == [20, 10]\n    assert get_odd_collatz(21) == [21, 64]\n    assert get_odd_collatz(22) == [22, 11]\n    assert get_odd_collatz(23) == [23, 70]\n    assert get_odd_collatz(24) == [24, 12]\n    assert get_odd_collatz(25) == [25, 76]\n    assert get_odd_collatz(26) == [26, 13]\n    assert get_odd_collatz(27) == [27, 82]\n    assert get_odd_collatz(28) == [28, 14]\n    assert get_odd_collatz(29) == [29, 94]\n    assert get_odd_collatz(30) == [30, 15]\n    assert get_odd_collatz(31) == [31, 106]\n    assert get_odd_collatz(32) == [32]\n    assert get_odd_collatz(33) == [33, 110]\n    assert get_odd_collatz(34) == [34, 17]\n    assert get_odd_collatz(35) == [35, 116]\n    assert get_odd_collatz(36) == [36, 18]\n    assert get_odd_collatz(37) == [37, 122]\n    assert get_odd_collatz(38) == [38, 19]\n    assert get_odd_collatz(39) == [39, 134]\n    assert get_odd_collatz(40) == [40, 20]\n    assert get_odd_collatz(41) == [41, 140]\n    assert get_odd_collatz(42) == [42, 21]\n    assert get_odd_collatz(43) == [43, 146]\n    assert get_odd_collatz(44) == [44, 22]\n    assert get_odd_collatz(45) == [45, 152]\n    assert get_odd_collatz(46) == [46, 23]\n    assert get_odd_collatz(47) == [47, 158]\n    assert get_odd_collatz(48) == [48, 24]\n    assert get_odd_collatz(49) == [49, 164]\n    assert get_odd_collatz(50) == [50, 25]\n    assert get_odd_collatz(51) == [51, 170]\n    assert get_odd_collatz(52) == [52, 26]\n    assert get_odd_collatz(53) == [53, 176]\n    assert get_odd_collatz(54) == [54, 27, 82]\n    assert get_odd_collatz(55) == [55, 182]\n    assert get_odd_collatz(56) == [56, 28]\n    assert get_odd_collatz(57) == [57, 188]\n    assert get_odd_collatz(58) == [58, 29]\n    assert get_odd_collatz(59) == [59, 194]\n    assert get_odd_collatz(60) == [60, 30]\n    assert get_odd_collatz(61) == [61, 200]\n    assert get_odd_collatz(62) == [62, 31]\n    assert get_odd_collatz(63) == [63, 206]\n    assert get_odd_collatz(64) == [64]\n    assert get_odd_collatz(65) == [65, 212]\n    assert get_odd_collatz(66) == [66, 33]\n    assert get_odd_collatz(67) == [67, 218]\n    assert get_odd_collatz(68) == [68, 34]\n    assert get_odd_collatz(69) == [69, 224]\n    assert get_odd_collatz(70) == [70, 35]\n    assert get_odd_collatz(71) == [71, 230]\n    assert get_odd_collatz(72) == [72, 36]\n    assert get_odd_collatz(73) == [73, 236]\n    assert get_odd_collatz(74) == [74, 37]\n    assert get_odd_collatz(75) == [75, 242]\n    assert get_odd_collatz(76) == [76, 38]\n    assert get_odd_collatz(77) == [77, 248]\n    assert get_odd_collatz(78) == [78, 39]\n    assert get_odd_collatz(79) == [79, 254]\n    assert get_odd_collatz(80) == [80, 40]\n    assert get_odd_collatz(81) == [81, 260]\n    assert get_odd_collatz(82) == [82, 41]\n    assert get_odd_collatz(83) == [83, 266]\n    assert get_odd_collatz(84) == [84, 42]\n    assert get_odd_collatz(85) == [85, 272]\n    assert get_odd_collatz(86) == [86, 43]\n    assert get_odd_collatz(87) == [87, 278]\n    assert get_odd_collatz(88) == [88, 44]\n    assert get_odd_collatz(89) == [89, 284]\n    assert get_odd_collatz(90) == [90, 45]\n    assert get_odd_collatz(91) == [91, 290]\n    assert get_odd_collatz(92) == [92, 46]\n    assert get_odd_collatz(93) == [93, 296]\n    assert get_odd_collatz(94) == [94, 47]\n    assert get_odd_collatz(95) == [95, 302]\n    assert get_odd_collatz(96) == [96, 48]\n    assert get_odd_collatz(97) == [97, 308]\n    assert get_odd_collatz(98) == [98, 49]\n    assert get_odd_collatz(99) == [99, 314]\n    assert get_odd_collatz(100) == [100, 50]", "coverage": 90.91}
{"task_id": "HumanEval/162", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n\n\n### Response:", "response": "import pytest\nimport hashlib\n\ndef test_string_to_md5():\n    # Test with a non-empty string\n    assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\n    # Test with an empty string\n    assert string_to_md5('') is None\n\n    # Test with a string containing special characters\n    assert string_to_md5('Test@123') == '5d98e73aa67030e953d9979f87729979'\n\n    # Test with a string containing numbers\n    assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'\n\n    # Test with a string containing uppercase letters\n    assert string_to_md5('HELLO') == '8b1a9953c4611296e8f671e90801c327'\n\n    # Test with a string containing lowercase letters\n    assert string_to_md5('hello') == '5d41402abc4b2a76b9719d911017c592'", "coverage": 100.0}
{"task_id": "HumanEval/41", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    return n**2\n\n\n### Response:", "response": "import pytest\n\ndef test_car_race_collision():\n    assert car_race_collision(0) == 0\n    assert car_race_collision(1) == 1\n    assert car_race_collision(2) == 4\n    assert car_race_collision(3) == 9\n    assert car_race_collision(4) == 16\n    assert car_race_collision(5) == 25", "coverage": 100.0}
{"task_id": "HumanEval/21", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n\n### Response:", "response": "import pytest\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n\ndef expected_rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n\ndef test_rescale_to_unit():\n    assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert rescale_to_unit([0.0, 0.0, 0.0, 0.0, 0.0]) == [0.0, 0.0, 0.0, 0.0, 0.0]\n    assert rescale_to_unit([10.0, 20.0, 30.0, 40.0, 50.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert rescale_to_unit([1.0, 1.0, 1.0, 1.0, 1.0]) == [0.0, 0.0, 0.0, 0.0, 0.0]", "coverage": 40.0}
{"task_id": "HumanEval/61", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n\n### Response:", "response": "import pytest\n\ndef test_correct_bracketing():\n    assert correct_bracketing(\"(\") == False\n    assert correct_bracketing(\"()\") == True\n    assert correct_bracketing(\"(()())\") == True\n    assert correct_bracketing(\")(()\") == False\n    assert correct_bracketing(\"\") == True\n    assert correct_bracketing(\"))\") == False\n    assert correct_bracketing(\"()()()()()\") == True\n    assert correct_bracketing(\"(((())))\") == True\n    assert correct_bracketing(\")(\") == False", "coverage": 100.0}
{"task_id": "HumanEval/97", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\n    return abs(a % 10) * abs(b % 10)\n\n\n### Response:", "response": "import pytest\n\ndef test_multiply_with_positive_numbers():\n    assert multiply(148, 412) == 16\n    assert multiply(19, 28) == 72\n    assert multiply(2020, 1851) == 0\n\ndef test_multiply_with_negative_numbers():\n    assert multiply(14,-15) == 20\n\ndef test_multiply_with_zero():\n    assert multiply(0, 123) == 0\n    assert multiply(123, 0) == 0\n    assert multiply(0, 0) == 0", "coverage": 100.0}
{"task_id": "HumanEval/27", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n    return string.swapcase()\n\n\n### Response:", "response": "import pytest\n\ndef test_flip_case():\n    assert flip_case('Hello') == 'hELLO'\n    assert flip_case('hELLO') == 'Hello'\n    assert flipip_case('HELLO') == 'hello'\n    assert flip_case('Python') == 'pYTHON'\n    assert flip_case('pyTHON') == 'PYTHON'\n    assert flip_case('12345') == '12345'\n    assert flip_case('') == ''", "coverage": 100.0}
{"task_id": "HumanEval/1", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n\n### Response:", "response": "import pytest\n\ndef test_separate_paren_groups_empty_string():\n    assert separate_paren_groups(\"\") == []\n\ndef test_separate_paren_groups_single_group():\n    assert separate_paren_groups(\"(())\") == [\"(())\"]\n\ndef test_separate_paren_groups_multiple_groups():\n    assert separate_paren_groups(\"(())(())\") == [\"(())\", \"(())\"]\n\ndef test_separate_paren_groups_nested_groups():\n    assert separate_paren_groups(\"((()))()(())\") == [\"((()))\", \"()\", \"(())\"]\n\ndef test_separate_paren_groups_ignore_spaces():\n    assert separate_paren_groups(\"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"]\n\ndef test_separate_paren_groups_complex_case():\n    assert separate_paren_groups(\"((( )))((( )))(( ))\") == [\"((()))\", \"((()))\", \"(( ))\"]", "coverage": 100.0}
{"task_id": "HumanEval/68", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\n\n### Response:", "response": "import pytest\n\ndef test_pluck_with_even_values():\n    assert pluck([4,2,3]) == [2, 1]\n    assert pluck([1,2,3]) == [2, 1]\n    assert pluck([5,0,3,0,4,2]) == [0, 1]\n\ndef test_pluck_with_no_even_values():\n    assert pluck([1,3,5]) == []\n\ndef test_pluck_with_empty_array():\n    assert pluck([]) == []\n\ndef test_pluck_with_multiple_smallest_even_values():\n    assert pluck([2,2,2,2,2]) == [2, 0]\n    assert pluck([0,4,4,4,4]) == [0, 0]\n\ndef test_pluck_with_large_input():\n    arr = list(range(10000))\n    assert pluck(arr) == [0, 0]", "coverage": 100.0}
{"task_id": "HumanEval/150", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\n\n### Response:", "response": "import pytest\n\ndef test_x_or_y_prime():\n    from your_module import x_or_y\n    assert x_or_y(7, 34, 12) == 34\n    assert x_or_y(11, 8, 5) == 8  # 11 is a prime number\n\ndef test_x_or_y_not_prime():\n    from your_module import x_or_y\n    assert x_or_y(4, 34, 12) == 12  # 4 is not a prime number\n    assert x_or_y(15, 8, 5) == 5\n\ndef test_x_or_y_one():\n    from your_module import x_or_y\n    assert x_or_y(1, 34, 12) == 12  # 1 is not a prime number\n\ndef test_x_or_y_zero():\n    from your_module import x_or_y\n    assert x_or_y(0, 34, 12) == 12  # 0 is not a prime number", "coverage": 14.29}
{"task_id": "HumanEval/112", "prompt": "You are an AI programming assistant that is skilled in testcase generation. You are designed to generate testcases for the given code with high coverage (try your best to cover all the code).\n### Workflow:\n1. Read the task prompt and the code carefully\n2. Generate a pytest test suite for the given code, including multiple test functions to cover all the code.\n\n### Constraints:\n- You must generate multiple test functions to cover all the code.\n- **CRITICAL**: Only write unit tests in the output and nothing else, no other text or comments.\n\n### Instructions:\n- You are supposed to generate **NOT ONLY ONE** test function, but multiple test functions to cover all the code.\n- DO NOT write many assertions in one test function, but write MULTIPLE test functions with MINIMAL assertions.\n\n### Critical:\n- **Do not guess semantics.** Read the code and determine the **exact predicate** (e.g., `== k` vs `< k` / `<= k` / `>= k`; or for ranges: `< n` vs `<= n`).\n- First, define a **local helper** inside the test file to compute **expected** results by **mirroring the code’s predicate exactly**.\n  Then assert `func(...) == expected_helper(...)`. This prevents mistakes on boundary conditions.\n  \n### Task Prompt and Code:\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n### Response:", "response": "import pytest\n\ndef test_reverse_delete_1():\n    assert reverse_delete(\"abcde\", \"ae\") == (\"bcd\", False)\n\ndef test_reverse_delete_2():\n    assert reverse_delete(\"abcdef\", \"b\") == (\"acdef\", False)\n\ndef test_reverse_delete_3():\n    assert reverse_delete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)\n\ndef test_reverse_delete_4():\n    assert reverse_delete(\"\", \"ae\") == (\"\", True)\n\ndef test_reverse_delete_5():\n    assert reverse_delete(\"abcde\", \"\") == (\"abcde\", False)\n\ndef test_reverse_delete_6():\n    assert reverse_delete(\"aabbcc\", \"abc\") == (\"\", True)\n\ndef test_reverse_delete_7():\n    assert reverse_delete(\"abcdefg\", \"gf\") == (\"abcde\", False)\n\ndef test_reverse_delete_8():\n    assert reverse_delete(\"abcba\", \"a\") == (\"bc\", False)\n\ndef test_reverse_delete_9():\n    assert reverse_delete(\"abcabc\", \"abc\") == (\"\", True)\n\ndef test_reverse_delete_10():\n    assert reverse_delete(\"abcabc\", \"\") == (\"abcabc\", False)", "coverage": 100.0}
